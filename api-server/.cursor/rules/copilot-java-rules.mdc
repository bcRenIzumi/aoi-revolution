# GitHub Copilot Java コード生成規約

## プロジェクト固有設定値
- ロジック実装パス: `api-server\src\main\java\jp\co\benesse\xxx\facade`
- ファイル命名規則: `{Controller名}+Facade.java`
- Controller命名規則: `/open/users` → `UsersController`、`/secure/users/profile` → `UsersProfileController`
- テーブル定義パス: `docs-example\DDL`

## 基本規則
- 処理詳細を基に、Facadeクラスのgetメソッドにコード生成
- 適宜serviceクラスやcommon/utilを呼び出し処理委譲
- 不明箇所は`// TO-DO:実装方法が不明箇所`でコメントアウト
- バリデーションは`*Request.java`で実施済みのためFacadeでは行わない

## コーディング規約

### 1. 可読性
- 意味のある変数名・メソッド名を使用
- 略語使用禁止、マジックナンバー定数化
- 早期リターン活用、ネスト最小化
- 1メソッド1責任、適切な分割
- 否定形より肯定形を優先

```java
// 良い例
private static final int MAX_RETRY_COUNT = 3;
if (member.isActive() && member.isWithinExpiryDate()) {
    // 処理
}

// 悪い例
if (!member.isInactive() && !member.hasInvalidLicense()) {
    // 処理
}
```

### 2. メモリ効率
- 必要最小限のオブジェクト生成
- プリミティブ型優先（nullが必要な場合はラッパークラス）
- 条件満足時の即座なbreak
- try-with-resources使用、大きなオブジェクトのnull代入

### 3. 例外処理
- 自作例外クラス使用（`.copilot\rules\java_common.md`定義）
- `ExceptionInterceptor.java`で例外キャッチ
- エラーメッセージは`error-messages.properties`から取得

### 4. ログ出力
```java
private static final Logger LOGGER = LogManager.getLogger(TestClass.class);

// レベル使い分け
// ERROR: システムエラー、予期しない例外
// WARN: 警告、ユーザー操作起因エラー
// INFO: 重要処理の開始・終了
// DEBUG: 詳細デバッグ情報

LOGGER.error("会員情報取得エラー。セッションID: {}, ユーザーID: {}", sessionId, userId, e);
```

### 5. スレッドセーフティ
- メンバ変数避け、ローカル変数使用
- DateTimeFormatter使用（SimpleDateFormat禁止）
- 必要時のみ@Scopeアノテーション使用

## アーキテクチャ構成

### 層構造
```
Controller → Facade → Service → Logic/Util → Dao → DB
           ↓         ↓         ↓              ↓
          Form      Dto       Dto           Entity
```

### Controllerクラス
- 画面と1対1関係
- 処理はFacadeに委譲

### Facadeクラス
- コントローラーと1対1
- Facade間呼び出し禁止
- publicメソッド内は適切にprivateメソッドに分割
- 例外処理は`ExceptionInterceptor.java`で実施

```java
@Service
public class MemberFacade {
    public void processMemberRegistration(MemberDto memberDto) {
        validateMemberInput(memberDto);
        checkDuplicateMember(memberDto);
        registerMember(memberDto);
        sendNotification(memberDto);
    }
    
    private void validateMemberInput(MemberDto memberDto) { /* 処理 */ }
}
```

### Serviceクラス
- 複数Facadeで使用する共通処理
- 引数のnullチェック厳密実施

### Utilクラス
- 全クラス共通の普遍的処理
- privateコンストラクタ定義
- static メソッド・フィールド使用

```java
public class StringUtil {
    private StringUtil() {}
    
    public static boolean isEmpty(String str) {
        return str == null || str.trim().length() == 0;
    }
}
```

### Daoクラス
- テーブル単位で作成（機能単位禁止）
- SQLクエリは`api-server\src\main\resources\sql`に配置
- SqlGeneratorBaseDaoを継承
- 命名規則: `[テーブル名]Dao`、SQL: `[クラス名]_[メソッド名].sql`

```java
@Repository
public class EnqueteDao extends SqlGeneratorBaseDao {
    public List<GyomuEntity> selectGyomu(String companyCode) throws DataAccessException {
        MapSqlParameterSource params = new MapSqlParameterSource()
                .addValue("companyCode", companyCode);
        String sql = getSql(params);
        return jt.query(sql, params, getRowMapper(GyomuEntity.class));
    }
}
```

### Entityクラス
- テーブル単位で作成
- 必ずラッパークラス使用
- BaseEntity継承
- @Getter、@Setterアノテーション使用

### Dtoクラス
- クラス間情報受け渡し用
- RequestDto/ResponseDtoで責任範囲明確化
- プリミティブ型使用可

### Formクラス
- 画面入力値・表示値保持
- @Validated付与、@NotBlank等使用

### Constantsクラス
- 定数・Enum管理
- privateコンストラクタ
- static final使用
- 対象別分割（ValidationConstants、TableConstants等）

## バッチ処理（Spring Batch）

### 基本構成
- Job: バッチ処理全体
- Step: 最小単位
- Taskletモデル / Chunkモデル選択

### 各クラス
- **Config**: ジョブ・ステップ設定
- **Tasklet**: メイン処理（@Transactional不要）
- **Reader/Processor/Writer**: 読込・加工・出力
- **Listener**: 開始・終了タイミング処理

## 禁止事項
1. System.out.print系使用禁止
2. e.printStackTrace()使用禁止
3. 例外握りつぶし禁止
4. マジックナンバー使用禁止
5. 無意味な変数名禁止
6. Facade間呼び出し禁止
7. Dao機能単位作成禁止
8. EntityをController-Service間受け渡し禁止
9. HTMLコメントでの内部情報記載禁止

## SQLファイル例
```sql
-- EnqueteDao_selectGyomu.sql
SELECT
    gyomu.GYOMU_CODE,
    gyomu.GYOMU_EDA,
    gyomu.TITLE
FROM
    gyomu
INNER JOIN COMPANY_GYOMU as company
    ON gyomu.GYOMU_CODE=company.GYOMU_CODE
WHERE
    company.COMPANY_CODE = /*[# mb:p="companyCode"]*/ '01' /*[/]*/
ORDER BY
    HYOJI_NO ASC
;
```

## 実装チェックポイント
1. 設計書との整合性確保
2. 単体テスト容易性
3. 保守性・可読性
4. パフォーマンス最適化
5. セキュリティ考慮
6. 責任分離原則
7. 適切な命名規約

このガイドラインに従い、品質の高いJavaコードを生成してください。
